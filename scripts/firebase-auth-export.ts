// Firebase Auth ÏÇ¨Ïö©Ïûê Î™©Î°ù ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ïä§ÌÅ¨Î¶ΩÌä∏
import { initializeApp } from 'firebase/app';
import { getAuth, connectAuthEmulator } from 'firebase/auth';
import * as admin from 'firebase-admin';
import * as fs from 'fs';
import * as path from 'path';
import * as dotenv from 'dotenv';

// ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
dotenv.config({ path: '.env.local' });

// Firebase ÏÑ§Ï†ï
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};

// Firebase Admin Ï¥àÍ∏∞Ìôî (ÏÑúÎπÑÏä§ Í≥ÑÏ†ï ÌÇ§ ÏóÜÏù¥ ÏãúÎèÑ)
try {
  if (!admin.apps.length) {
    admin.initializeApp({
      projectId: firebaseConfig.projectId,
    });
  }
} catch (error) {
  console.log('‚ö†Ô∏è Firebase Admin Ï¥àÍ∏∞Ìôî Ïã§Ìå®. ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ SDKÎßå ÏÇ¨Ïö©Ìï©ÎãàÎã§.');
}

// ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå (Admin SDK ÏÇ¨Ïö© ÏãúÎèÑ)
async function exportFirebaseUsers() {
  console.log('üîç Firebase Auth ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå ÏãúÏûë...\n');
  
  try {
    // Admin SDKÎ°ú ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå ÏãúÎèÑ
    const auth = admin.auth();
    const listUsersResult = await auth.listUsers();
    
    const users = listUsersResult.users.map(user => ({
      uid: user.uid,
      email: user.email,
      emailVerified: user.emailVerified,
      displayName: user.displayName,
      photoURL: user.photoURL,
      disabled: user.disabled,
      metadata: {
        creationTime: user.metadata.creationTime,
        lastSignInTime: user.metadata.lastSignInTime,
        lastRefreshTime: user.metadata.lastRefreshTime
      },
      customClaims: user.customClaims,
      providerData: user.providerData
    }));
    
    console.log(`‚úÖ Firebase Auth ÏÇ¨Ïö©Ïûê ${users.length}Î™Ö Î∞úÍ≤¨`);
    
    // Î∞±ÏóÖ ÌååÏùºÎ°ú Ï†ÄÏû•
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupDir = path.join(process.cwd(), 'backups');
    
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true });
    }
    
    const fileName = `firebase-auth-backup-${timestamp}.json`;
    const filePath = path.join(backupDir, fileName);
    
    const backup = {
      exportTime: new Date().toISOString(),
      userCount: users.length,
      users: users
    };
    
    fs.writeFileSync(filePath, JSON.stringify(backup, null, 2), 'utf8');
    
    console.log(`üìÅ Ï†ÄÏû• ÏúÑÏπò: ${filePath}\n`);
    
    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏöîÏïΩ Ï∂úÎ†•
    console.log('üë• ÏÇ¨Ïö©Ïûê Î™©Î°ù:');
    users.forEach((user, index) => {
      console.log(`  ${index + 1}. ${user.email || 'Ïù¥Î©îÏùº ÏóÜÏùå'} (${user.uid})`);
      console.log(`     ÏÉùÏÑ±: ${user.metadata.creationTime}`);
      console.log(`     ÎßàÏßÄÎßâ Î°úÍ∑∏Ïù∏: ${user.metadata.lastSignInTime || 'ÏóÜÏùå'}`);
      console.log('');
    });
    
    return { success: true, users, filePath };
    
  } catch (error: any) {
    console.error('‚ùå Firebase Auth ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Ïã§Ìå®:', error);
    
    if (error.code === 'app/no-options') {
      console.log('\nüí° Ìï¥Í≤∞ Î∞©Î≤ï:');
      console.log('1. Firebase ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ïÏóêÏÑú ÏÑúÎπÑÏä§ Í≥ÑÏ†ï ÌÇ§ Îã§Ïö¥Î°úÎìú');
      console.log('2. GOOGLE_APPLICATION_CREDENTIALS ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï');
      console.log('3. ÎòêÎäî Firebase ConsoleÏóêÏÑú ÏàòÎèôÏúºÎ°ú ÏÇ¨Ïö©Ïûê Î™©Î°ù ÌôïÏù∏');
    }
    
    return { success: false, error };
  }
}

// ÎåÄÏïà: Firebase ConsoleÏóêÏÑú ÏàòÎèô ÌôïÏù∏ ÏïàÎÇ¥
function showManualInstructions() {
  console.log('\nüì± Firebase ConsoleÏóêÏÑú ÏàòÎèô ÌôïÏù∏ÌïòÎäî Î∞©Î≤ï:');
  console.log('1. https://console.firebase.google.com Ï†ëÏÜç');
  console.log('2. ÌîÑÎ°úÏ†ùÌä∏ ÏÑ†ÌÉù');
  console.log('3. ÏôºÏ™Ω Î©îÎâ¥ÏóêÏÑú "Authentication" ÌÅ¥Î¶≠');
  console.log('4. "Users" ÌÉ≠ÏóêÏÑú Îì±Î°ùÎêú ÏÇ¨Ïö©Ïûê Î™©Î°ù ÌôïÏù∏');
  console.log('5. ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûàÎã§Î©¥ SupabaseÎ°ú Ïù¥Ï†Ñ ÌïÑÏöî');
  console.log('6. ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÎã§Î©¥ ÏÉàÎ°ú ÏãúÏûë Í∞ÄÎä•\n');
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if (require.main === module) {
  exportFirebaseUsers()
    .then((result) => {
      if (result.success) {
        console.log(`‚úÖ Auth Î∞±ÏóÖ ÏôÑÎ£å: ${result.users?.length}Î™Ö`);
      } else {
        console.log('‚ö†Ô∏è Auth Î∞±ÏóÖ Ïã§Ìå®, ÏàòÎèô ÌôïÏù∏ ÌïÑÏöî');
        showManualInstructions();
      }
    })
    .catch((error) => {
      console.error('‚ùå Ïò§Î•ò:', error);
      showManualInstructions();
    });
}

export { exportFirebaseUsers }; 